#!/usr/bin/python

import subprocess, sys, os, argparse
from pxr import *
from validateMesh import validateMesh
from validateMaterial import validateMaterial

def validateFile(file, verbose):
	stage = Usd.Stage.Open(file)
	success = True
	predicate = Usd.TraverseInstanceProxies(Usd.PrimIsActive & Usd.PrimIsDefined & ~Usd.PrimIsAbstract)
	for prim in stage.Traverse(predicate):
		if prim.GetTypeName() == "Mesh":
			success = validateMesh(prim, verbose) and success
		if prim.GetTypeName() == "Material":
			success = validateMaterial(prim, verbose) and success
	return success

def main(argumentList):
	parser = argparse.ArgumentParser()
	parser.add_argument("--verbose", "-v", action='store_true', help="Verbose mode.")
	parser.add_argument('files',nargs='*')
	args=parser.parse_args(argumentList)

	verboseOutput = args.verbose
	totalSuccess = True
	for filename in args.files:

		usdcheckerArgs = ["usdchecker", "--arkit", filename]
		if verboseOutput:
			print "Checking file", filename
			print "Running usdchecker"
			usdCheckerResult = (subprocess.call(usdcheckerArgs,) == 0)
		else:
			FNULL = open(os.devnull, 'w')
			usdCheckerResult = (subprocess.call(usdcheckerArgs,stdout=FNULL,stderr=FNULL) == 0)

		success = usdCheckerResult and validateFile(filename, verboseOutput)

		totalSuccess = success and totalSuccess
		if verboseOutput:
			print
		print "usdARKitChecker:", ("[Pass]" if success else "[Fail]"), filename

	if totalSuccess:
		return 0
	else:
		return 1

if __name__ == '__main__':
	argumentList = sys.argv[1:]
	sys.exit(main(argumentList))
